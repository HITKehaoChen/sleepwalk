components(graph_from_adjacency_matrix(difNeighbours, mode = "undirected"))
comps <- components(graph_from_adjacency_matrix(difNeighbours, mode = "undirected"))
table(comps$membership)
data_sub <- data[comps$membership == 1]
data_sub <- data[comps$membership == 1, ]
dd_sub <- difD4[comps$membership == 1, comps$membership == 1]
x <- seq(0, 5, length.out = 100)
plot(x, exp(-x^2/4^2))
plot(x, exp(-x^2/3^2))
plot(x, exp(-x^2/2.25^2))
grDists <- exp(-dd_sub^2/sigma^2)
sigma <- 2.25
grDists <- exp(-dd_sub^2/sigma^2)
umap_embedding <- function(X, ndim = 2, n_epochs = 500, min_dist = 0.01, spread = 1) {
ab_res <- uwot:::find_ab_params(spread = spread, min_dist = min_dist)
a <- ab_res[1]
b <- ab_res[2]
embedding_init <- uwot:::spectral_init(X, ndim = 2)
X@x[X@x < max(X@x)/n_epochs] <- 0
X <- Matrix::drop0(X)
#for(i in 1:nrow(X)) {
#  X[rank(X[, i]) < nrow(X) - 60, i] <- 0
#}
#X <- Matrix::drop0(X)
epochs_per_sample <- uwot:::make_epochs_per_sample(X@x, n_epochs)
positive_head <- X@i
positive_tail <- Matrix::which(X != 0, arr.ind = TRUE)[,
2] - 1
embedding <- t(embedding_init)
embedding <- t(uwot:::optimize_layout_umap(head_embedding = embedding,
tail_embedding = NULL, positive_head = positive_head,
positive_tail = positive_tail, n_epochs = n_epochs,
n_vertices = nrow(X), epochs_per_sample = epochs_per_sample,
a = a, b = b, gamma = 1, initial_alpha = 1,
5, approx_pow = F, parallelize = F,
grain_size = 1, move_other = TRUE))
embedding
}
emb <- umap_embedding(grDists)
grDists <- drop0(exp(-dd_sub^2/sigma^2))
emb <- umap_embedding(grDists)
plot(emb)
ggplot() + geom_point(aes(x = emb[, 1], y = emb = [, 2], color = ts[comps$membership == 1]))
ggplot() + geom_point(aes(x = emb[, 1], y = emb[, 2], color = ts[comps$membership == 1]))
ggplot() + geom_point(aes(x = emb[, 1], y = emb[, 2], color = ts[comps$membership == 1])) +
scale_colour_gradient(low = "black", high = "red")
pheatmap::pheatmap(grDists)
pheatmap::pheatmap(grDists[order(ts[comps$membership == 1]), ts[comps$membership == 1]], cluster_rows = F, cluster_cols = F)
pheatmap::pheatmap(grDists[order(ts[comps$membership == 1]), order(ts[comps$membership == 1])], cluster_rows = F, cluster_cols = F)
emb <- umap_embedding(grDists, spread = 0.5)
ggplot() + geom_point(aes(x = emb[, 1], y = emb[, 2], color = ts[comps$membership == 1])) +
scale_colour_gradient(low = "black", high = "red")
emb <- umap_embedding(grDists, spread = 0.3)
ggplot() + geom_point(aes(x = emb[, 1], y = emb[, 2], color = ts[comps$membership == 1])) +
scale_colour_gradient(low = "black", high = "red")
hist(rowSums(grDists))
min(rowSums(grDists))
diag(grDists) <- 0
emb <- umap_embedding(grDists, spread = 0.3)
ggplot() + geom_point(aes(x = emb[, 1], y = emb[, 2], color = ts[comps$membership == 1])) +
scale_colour_gradient(low = "black", high = "red")
pheatmap::pheatmap(grDists[order(ts[comps$membership == 1]), order(ts[comps$membership == 1])] > 0, cluster_rows = F, cluster_cols = F)
pheatmap::pheatmap(grDists[1 + (order(ts[comps$membership == 1]), order(ts[comps$membership == 1])] > 0), cluster_rows = F, cluster_cols = F)
pheatmap::pheatmap(1 + (grDists[order(ts[comps$membership == 1]), order(ts[comps$membership == 1])] > 0), cluster_rows = F, cluster_cols = F)
pheatmap::pheatmap(1 + (grDists[order(ts[comps$membership == 1]), order(ts[comps$membership == 1])] > 0.01), cluster_rows = F, cluster_cols = F)
pheatmap::pheatmap(grDists[order(ts[comps$membership == 1]), order(ts[comps$membership == 1])], cluster_rows = F, cluster_cols = F)
sort(rowSums(grDists))[1:20]
apply(dd_sub, 1, fucntion(row) min(row[row != 0]))
apply(dd_sub, 1, function(row) min(row[row != 0]))
str(dd_sub)
a <- matrix(1:12, nrow = 4)
b <- 1:4
a - b
t(t(a) - b)
a
nn <- apply(dd_sub, 1, function(row) min(row[row != 0]))
grDists <- drop0(exp(-(dd_sub - nn)^2/sigma^2))
diag(grDists) <- 0
emb <- umap_embedding(grDists, spread = 0.3)
ggplot() + geom_point(aes(x = emb[, 1], y = emb[, 2], color = ts[comps$membership == 1])) +
scale_colour_gradient(low = "black", high = "red")
pheatmap::pheatmap(grDists[order(ts[comps$membership == 1]), order(ts[comps$membership == 1])], cluster_rows = F, cluster_cols = F)
grDists[dd_sub > 4.5] <- 0
emb <- umap_embedding(grDists, spread = 0.3)
ggplot() + geom_point(aes(x = emb[, 1], y = emb[, 2], color = ts[comps$membership == 1])) +
scale_colour_gradient(low = "black", high = "red")
pheatmap::pheatmap(grDists[order(ts[comps$membership == 1]), order(ts[comps$membership == 1])], cluster_rows = F, cluster_cols = F)
library(Rtsne)
?tsne
?Rtsne
tsne <- Rtsne(difD4, is_distance = T)
ggplot() + geom_point(aes(x = tsne$Y[, 1], y = tsne$Y[, 2], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
install.packages("vegan")
install.packages("mgcv")
install.packages("vegan")
vegan::isomap(difD4)
vegan::isomap(difD4, k = 15)
im <- vegan::isomap(difD4, k = 15)
ggplot() + geom_point(aes(x = im$points[, 1], y = im$points[, 2], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
ggplot() + geom_point(aes(x = pca$x[, 1], y = pca$x[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
ggplot() + geom_point(aes(x = im$points[, 1], y = im$points[, 2], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
plot(rd, ed, pch = ".")
plot(rd, difD4, pch = ".")
plot(ed, difD4, pch = ".")
plot(rd, difD4, pch = ".")
hist(sigmas)
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
library(DDRTree)
?DDRTree
ddt <- DDRTree(difD4)
ddt$W
plot(ddt$W)
str(ddt)
plot(ddt$Y)
plot(t(ddt$Y))
ggplot() + geom_point(aes(x = ddt$Y[1,], y = ddt$Y[2, ], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
ggplot() + geom_point(aes(x = ddt$W[,1], y = ddt$W[, 2], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
ddt <- DDRTree(data)
ggplot() + geom_point(aes(x = ddt$W[,1], y = ddt$W[, 2], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
ggplot() + geom_point(aes(x = ddt$Y[1,], y = ddt$Y[2, ], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
str(ddr)
str(ddt)
ggplot() + geom_point(aes(x = ddt$W[,1], y = ddt$W[, 2], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
points <- cbind(10  * cos(w * ts), sin(w * ts), a * ts)
ndim <- 6
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 5), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
data <- noise
data[, 1:3] <- data[, 1:3] + points
pca <- prcomp_irlba(data, n = 2)
ggplot() + geom_point(aes(x = pca$x[, 1], y = pca$x[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data, sigma = 15)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
points <- cbind(15  * cos(w * ts), sin(w * ts), a * ts)
ndim <- 6
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 7), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
plot_ly(x = points[, 1], y = points[, 2], z = points[, 3],
marker = list(size = 2, color = ts))
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 4), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
points <- cbind(15  * cos(w * ts), 15 * sin(w * ts), a * ts)
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 2), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
points <- cbind(15  * cos(w * ts), 15 * sin(w * ts), a * ts)
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 1), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
points <- cbind(15*cos(w * ts), 15*sin(w * ts), a * ts)
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 1), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
plot_ly(x = points[, 1], y = points[, 2], z = points[, 3],
marker = list(size = 2, color = ts))
15*cos(w * ts)
range(15*cos(w * ts))
points <- cbind(15*cos(w * ts), 15*sin(w * ts), a * ts)
15*cos(w * ts)
15*sin(w * ts)
a * ts
a <- 3
points <- cbind(15*cos(w * ts), 15*sin(w * ts), a * ts)
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 4), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
pca <- prcomp_irlba(data, n = 2)
ggplot() + geom_point(aes(x = pca$x[, 1], y = pca$x[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data, sigma = 15)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
um <- umap(data)
ggplot() + geom_point(aes(x = um[, 1], y = um[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
knn <- destiny:::get_knn(data, NULL, 10)
sigmas <- destiny:::get_sigmas(data, knn$dist, "local", 5:7)
sigmas <- sigmas@optimal_sigma
dists <- knn$dist_mat
L <- destiny:::no_censoring(knn$dist_mat, sigmas)
L[cbind(1:nrow(L), 1:nrow(L))] <- 1
#diogonal of D
d <- rowSums(L, na.rm = TRUE)
M <- L / d
M <- drop0(M)
reig <- eigen(M)
ggplot() + geom_point(aes(x = reig$vectors[, 2], y = reig$vectors[, 3], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
reig2 <- eigen(M %*% M %*% M %*% M)
ggplot() + geom_point(aes(x = reig2$vectors[, 2], y = reig2$vectors[, 3], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
plot_difD_mds <- function(M, d, t = 1) {
tr <- M
if(t > 1)
for(i in 2:t)
tr <- tr %*% M
difD <- dist(t(t(tr) / sqrt(d/sum(d))))
fit <- cmdscale(difD, k=2)
ggplot() + geom_point(aes(x = fit[, 1], y = fit[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
}
for(i in 1:10)
print(plot_difD_mds(M, d, i))
difD <- as.matrix(dist(t(t(M) / sqrt(d/sum(d)))))
difD2 <- as.matrix(dist(t(t(M %*% M) / sqrt(d/sum(d)))))
difD4 <- as.matrix(dist(t(t(M %*% M %*% M %*% M) / sqrt(d/sum(d)))))
ed <- as.matrix(dist(data))
rd <- abs(outer(ts, ts, '-'))
plot(rd, ed, pch = ".")
plot(rd, difD4, pch = ".")
plot(ed, difD4, pch = ".")
plot(rd, difD4, pch = ".")
difNeighbours <- difD4
abline(h = 3.5)
plot(rd, ed, col = 5 + (difD4 < 3.5), pch = ".")
difNeighbours <- difD4
difNeighbours[difNeighbours > 3.5] <- 0
difNeighbours <- drop0(difNeighbours)
comps <- components(graph_from_adjacency_matrix(difNeighbours, mode = "undirected"))
data_sub <- data[comps$membership == 1, ]
dd_sub <- difD4[comps$membership == 1, comps$membership == 1]
nn <- apply(dd_sub, 1, function(row) min(row[row != 0]))
sigma <- 1.75
apply(dd_sub, 1, function(row) min(row[row != 0]))
grDists <- drop0(exp(-(dd_sub - nn)^2/sigma^2))
grDists[dd_sub > 4.5] <- 0
diag(grDists) <- 0
emb <- umap_embedding(grDists, spread = 0.3)
ggplot() + geom_point(aes(x = emb[, 1], y = emb[, 2], color = ts[comps$membership == 1])) +
scale_colour_gradient(low = "black", high = "red")
tsne <- Rtsne(difD4, is_distance = T, )
ggplot() + geom_point(aes(x = tsne$Y[, 1], y = tsne$Y[, 2], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
im <- vegan::isomap(difD4, k = 15)
ggplot() + geom_point(aes(x = im$points[, 1], y = im$points[, 2], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
ddt <- DDRTree(data)
ggplot() + geom_point(aes(x = ddt$W[,1], y = ddt$W[, 2], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
pheatmap::pheatmap(1 + (grDists[order(ts[comps$membership == 1]), order(ts[comps$membership == 1])] > 0.01), cluster_rows = F, cluster_cols = F)
plot(rd, ed, col = 5 + (difD4 < 3.5), pch = ".")
hist(ed, 30)
hist(ed, 50)
abline(v = 10)
clNs <- which(ed < 10)
clNs
clNs <- which(ed < 10, arr.ind = T)
clNs
hist(abs(ts[clNs[, 1]] - ts[clNs[, 2]]))
abs(data[clNs[, 1], ] - data[clNs[, 2], ])
fdists <- abs(data[clNs[, 1], ] - data[clNs[, 2], ])
colnames(fdists) <- paste0("V", 1:6)
library(tidyverse)
fdists %>%
gather("feature", "dist")
fdists %>%
as.tibble() %>%
gather("feature", "dist")
?geom_histogram
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
ggplot() + geom_histogram(aes(x = dist, fill = feature), position = "identity")
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_histogram(aes(x = dist, fill = feature), )
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_histogram(aes(x = dist, fill = feature), position = "identity")
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_density(aes(x = dist, fill = feature), alpha = 0.5)
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_freqpoly(aes(x = dist, fill = feature), alpha = 0.5)
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_freqpoly(aes(x = dist, fill = feature), position = "dodge")
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_histogram(aes(x = dist, fill = feature), position = "dodge")
?geom_boxplot
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_boxplot(x = dist)
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_boxplot(x = feature, y = dist)
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_boxplot(aes(x = feature, y = dist))
clNs <- which(ed < 20, arr.ind = T)
fdists <- abs(data[clNs[, 1], ] - data[clNs[, 2], ])
colnames(fdists) <- paste0("V", 1:6)
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_boxplot(aes(x = feature, y = dist))
sds <- genefilter::rowSds(t(data))
sds
a <- matrix(1:12, nrow = 4)
b <- 1:4
a
a/b
fdists <- abs(data[clNs[, 1], ] - data[clNs[, 2], ])
fdists <- t(t(fdists)/sds)
colnames(fdists) <- paste0("V", 1:6)
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_boxplot(aes(x = feature, y = dist))
scData <- t(t(data)/sds)
scEd <- as.matrix(dists(scData))
scEd <- as.matrix(dist(scData))
hist(scEd, 30)
clNs <- which(scEd < 1.5, arr.ind = T)
fdists <- abs(scData[clNs[, 1], ] - scData[clNs[, 2], ])
colnames(fdists) <- paste0("V", 1:6)
fdists %>%
as.tibble() %>%
gather("feature", "dist") %>%
filter(dist > 0) %>%
ggplot() + geom_boxplot(aes(x = feature, y = dist))
plot(fdists[ ,1 ], fdists[,2])
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
ts <- c(rnorm(100), rnorm(200, 5), rnorm(150, 13), runif(200, min = -5, max = 20))
points <- cbind(15*cos(w * ts), 15*sin(w * ts), a * ts)
a <- 3
w <- 1
points <- cbind(15*cos(w * ts), 15*sin(w * ts), a * ts)
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 4), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
data <- noise
data[, 1:3] <- data[, 1:3] + points
ggplot() + geom_point(aes(x = pca$x[, 1], y = pca$x[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
ggplot() + geom_point(aes(x = pca$x[, 1], y = pca$x[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
pca <- prcomp_irlba(data, n = 2)
ggplot() + geom_point(aes(x = pca$x[, 1], y = pca$x[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data, sigma = 15)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
um <- umap(data)
ggplot() + geom_point(aes(x = um[, 1], y = um[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
install.packages("princurve")
?princurve::princurve
princurve::principal_curve(data)
pc <- princurve::principal_curve(data)
plot(ts, pc$ord)
plot(order(ts), pc$ord)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
points <- cbind(30*cos(w * ts), 30*sin(w * ts), a * ts)
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 8), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
data <- noise
data[, 1:3] <- data[, 1:3] + points
pca <- prcomp_irlba(data, n = 2)
ggplot() + geom_point(aes(x = pca$x[, 1], y = pca$x[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data, sigma = 15)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
um <- umap(data)
ggplot() + geom_point(aes(x = um[, 1], y = um[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
ddt <- DDRTree(data)
ggplot() + geom_point(aes(x = ddt$W[,1], y = ddt$W[, 2], color = ts)) +
scale_colour_gradient(low = "black", high = "red")
ggplot() + geom_point(aes(x = pca$x[, 1], y = pca$x[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
knn <- destiny:::get_knn(data, NULL, 10)
sigmas <- destiny:::get_sigmas(data, knn$dist, "local", 5:7)
sigmas <- sigmas@optimal_sigma
dists <- knn$dist_mat
L <- destiny:::no_censoring(knn$dist_mat, sigmas)
L[cbind(1:nrow(L), 1:nrow(L))] <- 1
#diogonal of D
d <- rowSums(L, na.rm = TRUE)
M <- L / d
M <- drop0(M)
reig <- eigen(M)
ggplot() + geom_point(aes(x = reig$vectors[, 2], y = reig$vectors[, 3], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
plot_difD_mds <- function(M, d, t = 1) {
tr <- M
if(t > 1)
for(i in 2:t)
tr <- tr %*% M
difD <- dist(t(t(tr) / sqrt(d/sum(d))))
fit <- cmdscale(difD, k=2)
ggplot() + geom_point(aes(x = fit[, 1], y = fit[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
}
for(i in 1:10)
print(plot_difD_mds(M, d, i))
pheatmap::pheatmap(L[order(ts), order(ts)], cluster_rows = F, cluster_cols = F)
pheatmap::pheatmap((M %*% M %*% M)[order(ts), order(ts)], cluster_rows = F, cluster_cols = F)
plot(rd, ed, pch = ".")
difD <- as.matrix(dist(t(t(M) / sqrt(d/sum(d)))))
difD2 <- as.matrix(dist(t(t(M %*% M) / sqrt(d/sum(d)))))
difD4 <- as.matrix(dist(t(t(M %*% M %*% M %*% M) / sqrt(d/sum(d)))))
ed <- as.matrix(dist(data))
rd <- abs(outer(ts, ts, '-'))
plot(rd, ed, pch = ".")
plot(rd, difD4, pch = ".")
plot(ed, difD4, pch = ".")
plot(rd, difD4, pch = ".")
plot(rd, ed, pch = ".")
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
a <- 4
w <- 1
points <- cbind(30*cos(w * ts), 30*sin(w * ts), a * ts)
ndim <- 6
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 8), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
plot_ly(x = points[, 1] + noise[, 1], y = points[, 2] + noise[, 2], z = points[, 3] + noise[, 3],
marker = list(size = 2, color = ts))
data <- noise
data[, 1:3] <- data[, 1:3] + points
pca <- prcomp_irlba(data, n = 2)
ggplot() + geom_point(aes(x = pca$x[, 1], y = pca$x[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data, sigma = 15)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
dm <- DiffusionMap(data)
ggplot() + geom_point(aes(x = dm$DC1, y = dm$DC2, colour = ts)) + scale_colour_gradient(low = "black", high = "red")
um <- umap(data)
ggplot() + geom_point(aes(x = um[, 1], y = um[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
a <- 3
points <- cbind(30*cos(w * ts), 30*sin(w * ts), a * ts)
noise <- cbind(matrix(rnorm(length(ts) * 3, sd = 8), ncol = 3),
matrix(rnorm(length(ts) * (ndim - 3), sd = 10), ncol = ndim - 3))
data <- noise
data[, 1:3] <- data[, 1:3] + points
pca <- prcomp_irlba(data, n = 2)
ggplot() + geom_point(aes(x = pca$x[, 1], y = pca$x[, 2], colour = ts)) + scale_colour_gradient(low = "black", high = "red")
sample(3, 1)
sample(4, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(4, 1)
sample(3, 1)
sample(3, 1)
sample(4, 1)
sample(3, 1)
sample(3, 1)
sample(4, 1)
sample(3, 1)
sample(4, 1)
setwd("~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data")
file <- readLines("../supplementary/Fig_B.html")
str(file)
line <- which(grepl("^set_up_chart()", file))
line <- which(grepl("^set_up_chart\(", file))
line <- which(grepl("^set_up_chart\\(", file))
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_B.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_B.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_B.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_A.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_A.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_C.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_C.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_C.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_C.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_Ca.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_D.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_E.R', echo=TRUE)
source('~/Work/Git/workbook-simon/2019-Q1/sleepwalk_paper/data/Fig_Ca.R', echo=TRUE)
palette(c("#000000", "#1A1935", "#15474E", "#2B6F39", "#767B33", "#C17A6F", "#D490C6", "#C3C0F2"))
dev.off
dev.off()
palette(c("#000000", "#1A1935", "#15474E", "#2B6F39", "#767B33", "#C17A6F", "#D490C6", "#C3C0F2"))
display.pal(c("#000000", "#1A1935", "#15474E", "#2B6F39", "#767B33", "#C17A6F", "#D490C6", "#C3C0F2"))
scales::show_col(c("#000000", "#1A1935", "#15474E", "#2B6F39", "#767B33", "#C17A6F", "#D490C6", "#C3C0F2"))
